<?php

namespace Tests\Feature\Admin\Admin;

use App\Models\Board;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class BoardTest extends TestCase
{
    use RefreshDatabase;

    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
        $this->user = User::factory()->create();
    }

    protected function tearDown(): void
    {
        $boards = Board::all();
        foreach ($boards as $board) {
            Schema::dropIfExists(env('BOARD_TABLE_PREFIX').$board->tableName.'_file');
            Schema::dropIfExists(env('BOARD_TABLE_PREFIX').$board->tableName);
        }
        Schema::disableForeignKeyConstraints();
        Board::truncate();
        User::truncate();
        Schema::enableForeignKeyConstraints();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    /**
     * A basic feature test example.
     *
     * @return void
     */
    public function test_board_create()
    {
        $response = $this->actingAs($this->user)->post(route('admin.board.store'), [
            'name'                => 'Test Board',
            'table_name'          => 'test',
            'item_count_per_page' => 10,
            'category'            => 'AAA|BBB|CCC',
        ]);

        $board = Board::orderByDesc('id')->first();

        $response->assertRedirect(route('admin.board.show', $board->id));
        $this->assertTrue(Schema::hasTable(env('BOARD_TABLE_PREFIX').$board->tableName));
    }

    public function test_board_list()
    {
        $this->actingAs($this->user)->post(route('admin.board.store'), [
            'name'                => 'Test1 Board',
            'table_name'          => 'test1',
            'item_count_per_page' => 10,
            'category'            => 'AAA|BBB|CCC',
        ]);
        $this->actingAs($this->user)->post(route('admin.board.store'), [
            'name'                => 'Test2 Board',
            'table_name'          => 'test2',
            'item_count_per_page' => 20,
            'category'            => 'DDD|EEE|FFF',
        ]);

        $response = $this->actingAs($this->user)->get(route('admin.board.index'));

        $response->assertSeeText('test1');
        $response->assertSeeText('Test1 Board');
        $response->assertSeeText('test2');
        $response->assertSeeText('Test2 Board');
    }

    public function test_board_update()
    {
        $this->actingAs($this->user)->post(route('admin.board.store'), [
            'name'                => 'Test Board',
            'table_name'          => 'test',
            'item_count_per_page' => 10,
            'category'            => 'AAA|BBB|CCC',
        ]);

        $board   = Board::first();
        $boardId = $board->id;

        $response = $this->actingAs($this->user)->put(route('admin.board.update', $boardId), [
            'name'                => 'Update Test',
            'item_count_per_page' => 22,
            'category'            => 'XXX|YYY|ZZZ',
        ]);

        $targetBoard = Board::find($boardId);

        $response->assertRedirect(route('admin.board.show', $boardId));
        $this->assertEquals('Update Test', $targetBoard->name, 'Name is not equal.');
        $this->assertEquals(22, $targetBoard->itemCountPerPage, 'Item Count Per Page is not equal.');
        $this->assertEquals('XXX|YYY|ZZZ', $targetBoard->category, 'Category is not equal.');
    }
}
