<?php

namespace Tests\Feature\Admin\Admin;

use App\Models\Board;
use App\Models\Content;
use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class ContentTest extends TestCase
{
    use RefreshDatabase;

    private $user;
    private $board;
    private $table;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
        $this->user = User::factory()->create();
        $this->actingAs($this->user)->post(route('admin.board.store'), [
            'name'                => 'Test Board',
            'table_name'          => 'test',
            'item_count_per_page' => 10,
            'category'            => 'AAA|BBB|CCC',
        ]);
        $this->board = Board::all()->first();
        $this->table = env('BOARD_TABLE_PREFIX').$this->board->tableName;
    }

    protected function tearDown(): void
    {
        $boards = Board::all();
        foreach ($boards as $board) {
            Schema::dropIfExists(env('BOARD_TABLE_PREFIX').$board->tableName.'_file');
            Schema::dropIfExists(env('BOARD_TABLE_PREFIX').$board->tableName);
        }
        Board::truncate();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_content_create()
    {
        $response = $this->actingAs($this->user)->post(route('admin.board.content.store', $this->board->tableName), [
            'title'    => 'Test Content',
            'author'   => 'Author',
            'content'  => 'Test Content',
            'category' => '',
            'files'    => '',
        ]);

        $content = Content::fromTable($this->table)->get()->last();

        $response->assertRedirect(route('admin.board.content.index', $this->board->tableName));
        $this->assertEquals('Test Content', $content->title, 'Title is not equal.');
    }

    public function test_content_list()
    {
        $this->actingAs($this->user)->post(route('admin.board.content.store', $this->board->tableName), [
            'title'    => 'Test Content',
            'author'   => 'Author',
            'content'  => 'Test Content',
            'category' => '',
            'files'    => '',
        ]);

        $response = $this->actingAs($this->user)->get(route('admin.board.content.index', $this->board->tableName));

        $response->assertSeeText('Test Content');
    }

    public function test_content_update()
    {
        $this->actingAs($this->user)->post(route('admin.board.content.store', $this->board->tableName), [
            'title'    => 'Test Content',
            'author'   => 'Author',
            'content'  => 'Test Content',
            'category' => '',
            'files'    => '',
        ]);

        $content = Content::fromTable($this->table)->first();

        $response = $this->actingAs($this->user)->put(route('admin.board.content.update', [
            $this->board->tableName,
            $content->id,
        ]), [
            'title'   => 'Update Test',
            'author'  => '',
            'content' => 'Update Content',
        ]);

        $updatedContent = Content::fromTable($this->table)->first();

        $response->assertRedirect(route('admin.board.content.show', [$this->board->tableName, $content->id]));
        $this->assertEquals('Update Test', $updatedContent->title, 'Title is not equal.');
        $this->assertEquals('Update Content', $updatedContent->content, 'Content is not equal.');
    }
}
