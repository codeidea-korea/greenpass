<?php

namespace Tests\Feature\Admin\Admin;

use App\Models\User;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Support\Facades\Schema;
use Tests\TestCase;

class MasterTest extends TestCase
{
    use RefreshDatabase;

    private $user;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->artisan('migrate');
        $this->user = User::factory()->create();
    }

    protected function tearDown(): void
    {
        Schema::disableForeignKeyConstraints();
        User::truncate();
        Schema::enableForeignKeyConstraints();

        parent::tearDown(); // TODO: Change the autogenerated stub
    }

    public function test_master_create()
    {
        $response = $this->actingAs($this->user)->post(route('admin.master.store'), [
            'username'         => 'master_user',
            'password'         => 'password1234',
            'password_confirm' => 'password1234',
            'name'             => 'Master Name',
            'email'            => 'master@master.com',
            'cellphone'        => '010-2222-3333',
            'birthday'         => '900101',
        ]);

        $user = User::where('username', 'master_user')
                    ->where('type', 'admin')
                    ->first();

        $response->assertRedirect(route('admin.master.show', $user->code));
    }

    public function test_master_show()
    {
        $this->actingAs($this->user)->post(route('admin.master.store'), [
            'username'         => 'master_user',
            'password'         => 'password1234',
            'password_confirm' => 'password1234',
            'name'             => 'Master Name',
            'email'            => 'master@master.com',
            'cellphone'        => '010-2222-3333',
            'birthday'         => '900101',
        ]);

        $user = User::where('username', 'master_user')
                    ->where('type', 'admin')
                    ->first();

        $response = $this->actingAs($this->user)->get(route('admin.master.show', $user->code));

        $response->assertStatus(200);
        $response->assertSeeText('master_user');
        $response->assertSeeText($user->code);
    }

    public function test_master_update()
    {
        $this->actingAs($this->user)->post(route('admin.master.store'), [
            'username'         => 'master_user',
            'password'         => 'password1234',
            'password_confirm' => 'password1234',
            'name'             => 'Master Name',
            'email'            => 'master@master.com',
            'cellphone'        => '010-2222-3333',
            'birthday'         => '900101',
        ]);

        $user = User::where('username', 'master_user')
                    ->where('type', 'admin')
                    ->first();

        $response = $this->actingAs($this->user)->put(route('admin.master.update', $user->code), [
            'name' => 'Master Update Name',
        ]);

        $updatedUser = User::where('username', 'master_user')
                           ->where('type', 'admin')
                           ->first();

        $response->assertRedirect(route('admin.master.show', $user->code));
        $this->assertEquals('Master Update Name', $updatedUser->name, 'Name is not equal.');
    }

    public function test_master_list()
    {
        $response = $this->actingAs($this->user)->get(route('admin.master.index'));

        $response->assertStatus(200);
    }
}
